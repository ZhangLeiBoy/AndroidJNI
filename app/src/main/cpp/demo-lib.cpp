/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <cstring>
#include <malloc.h>
#include "demo.cpp"
/* Header for class com_albert_demo_util_NativeMethodSum */

#ifndef _Included_com_albert_demo_util_NativeMethodSum
#define _Included_com_albert_demo_util_NativeMethodSum
#ifdef __cplusplus
extern "C" {
#endif


/****
 *
 * 将Java数组转化成C++ 指针数组
 */

jint * getIntArrayFromJava(JNIEnv *env,jintArray j_array){
    jint *c_array;
    jint arr_len;
    arr_len = (*env).GetArrayLength(j_array);
    c_array = (jint*)malloc(sizeof(jint) * arr_len);
    //初始化
    memset(c_array,0,sizeof(jint)*arr_len);
    //获取数组
    c_array = (*env).GetIntArrayElements(j_array,NULL);
    return c_array;
}



/*
 * Class:     com_albert_demo_util_NativeMethodSum
 * Method:    sum
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_com_albert_demo_util_NativeMethodSum_sum
  (JNIEnv *, jclass, jint a, jint b){
  Demo demo = Demo();
  jint result = demo.sum(a,b);
  return result;
}

/*
 * Class:     com_albert_demo_util_NativeMethodSum
 * Method:    twoSum
 * Signature: ([II)I
 */
JNIEXPORT jintArray JNICALL Java_com_albert_demo_util_NativeMethodSum_twoSum
  (JNIEnv *env, jobject, jintArray nums, jint target){
    Demo demo = Demo();
    jint *result = demo.twoSum(getIntArrayFromJava(env,nums),target);
    if (result == nullptr){
        return nullptr;
    }
    // C++返回的数组为指针形式，也不能直接返回给java，所以通过Jni复制一个jintArray数组返回给java
    jintArray array = (*env).NewIntArray(2);
    (*env).SetIntArrayRegion(array,0,2,result);
    return array;
}

#ifdef __cplusplus
}
#endif
#endif
